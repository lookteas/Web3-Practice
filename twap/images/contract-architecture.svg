<svg width="1000" height="800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; }
      .subtitle { font-family: Arial, sans-serif; font-size: 14px; fill: #34495e; }
      .contract-title { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: #2c3e50; }
      .function-title { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; fill: #2c3e50; }
      .text { font-family: Arial, sans-serif; font-size: 11px; fill: #2c3e50; }
      .small-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .contract-box { fill: #ecf0f1; stroke: #34495e; stroke-width: 2; rx: 8; }
      .main-contract { fill: #3498db; stroke: #2980b9; stroke-width: 3; rx: 8; }
      .interface-box { fill: #f39c12; stroke: #e67e22; stroke-width: 2; rx: 8; }
      .library-box { fill: #9b59b6; stroke: #8e44ad; stroke-width: 2; rx: 8; }
      .external-box { fill: #e74c3c; stroke: #c0392b; stroke-width: 2; rx: 8; }
      .storage-box { fill: #27ae60; stroke: #229954; stroke-width: 2; rx: 8; }
      .white-text { fill: white; }
      .arrow { stroke: #34495e; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .inherit-arrow { stroke: #f39c12; stroke-width: 2; fill: none; marker-end: url(#arrowhead-orange); stroke-dasharray: 5,5; }
      .use-arrow { stroke: #9b59b6; stroke-width: 2; fill: none; marker-end: url(#arrowhead-purple); }
      .interact-arrow { stroke: #e74c3c; stroke-width: 2; fill: none; marker-end: url(#arrowhead-red); }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#34495e"/>
    </marker>
    <marker id="arrowhead-orange" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#f39c12"/>
    </marker>
    <marker id="arrowhead-purple" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#9b59b6"/>
    </marker>
    <marker id="arrowhead-red" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#e74c3c"/>
    </marker>
  </defs>
  
  <!-- 标题 -->
  <text x="500" y="30" text-anchor="middle" class="title">MemeTWAP 合约架构图</text>
  <text x="500" y="50" text-anchor="middle" class="subtitle">Contract Architecture Diagram</text>
  
  <!-- 主合约 MemeTWAP -->
  <rect x="350" y="100" width="300" height="200" class="main-contract"/>
  <text x="500" y="125" text-anchor="middle" class="contract-title white-text">MemeTWAP.sol</text>
  <text x="500" y="145" text-anchor="middle" class="text white-text">主合约 - 核心TWAP功能</text>
  
  <!-- 主要函数 -->
  <text x="360" y="165" class="function-title white-text">核心函数:</text>
  <text x="360" y="180" class="small-text white-text">• updatePrice(address, uint256)</text>
  <text x="360" y="195" class="small-text white-text">• batchUpdatePrices(address[], uint256[])</text>
  <text x="360" y="210" class="small-text white-text">• calculateTWAP(address, uint256, uint256)</text>
  <text x="360" y="225" class="small-text white-text">• getRecentTWAPs(address, uint256, uint256)</text>
  <text x="360" y="240" class="small-text white-text">• getCurrentPrice(address)</text>
  <text x="360" y="255" class="small-text white-text">• getPriceHistory(address, uint256)</text>
  
  <!-- 访问控制 -->
  <text x="360" y="275" class="function-title white-text">访问控制:</text>
  <text x="360" y="290" class="small-text white-text">• onlyOwner, onlyUpdater 修饰符</text>
  
  <!-- OpenZeppelin Ownable -->
  <rect x="50" y="100" width="200" height="80" class="interface-box"/>
  <text x="150" y="125" text-anchor="middle" class="contract-title">Ownable</text>
  <text x="150" y="145" text-anchor="middle" class="text">OpenZeppelin 访问控制</text>
  <text x="60" y="165" class="small-text">• owner() 函数</text>
  <text x="60" y="175" class="small-text">• onlyOwner 修饰符</text>
  
  <!-- 数据结构 -->
  <rect x="750" y="100" width="200" height="120" class="storage-box"/>
  <text x="850" y="125" text-anchor="middle" class="contract-title white-text">数据结构</text>
  <text x="760" y="145" class="small-text white-text">struct PricePoint {</text>
  <text x="770" y="160" class="small-text white-text">uint256 price;</text>
  <text x="770" y="175" class="small-text white-text">uint256 timestamp;</text>
  <text x="760" y="190" class="small-text white-text">}</text>
  <text x="760" y="210" class="small-text white-text">struct TWAPData { ... }</text>
  
  <!-- 存储映射 -->
  <rect x="750" y="250" width="200" height="100" class="storage-box"/>
  <text x="850" y="275" text-anchor="middle" class="contract-title white-text">存储映射</text>
  <text x="760" y="295" class="small-text white-text">mapping(address => </text>
  <text x="770" y="310" class="small-text white-text">PricePoint[]) priceHistory</text>
  <text x="760" y="330" class="small-text white-text">mapping(address => uint256)</text>
  <text x="770" y="345" class="small-text white-text">lastUpdateTime</text>
  
  <!-- 外部调用者 -->
  <rect x="50" y="250" width="200" height="100" class="external-box"/>
  <text x="150" y="275" text-anchor="middle" class="contract-title white-text">外部调用者</text>
  <text x="60" y="295" class="small-text white-text">• Price Oracle 服务</text>
  <text x="60" y="310" class="small-text white-text">• DeFi 协议</text>
  <text x="60" y="325" class="small-text white-text">• 自动化脚本</text>
  <text x="60" y="340" class="small-text white-text">• 管理员账户</text>
  
  <!-- 事件系统 -->
  <rect x="350" y="350" width="300" height="100" class="contract-box"/>
  <text x="500" y="375" text-anchor="middle" class="contract-title">事件系统</text>
  <text x="360" y="395" class="small-text">• PriceUpdated(address token, uint256 price, uint256 timestamp)</text>
  <text x="360" y="410" class="small-text">• BatchPriceUpdated(address[] tokens, uint256[] prices)</text>
  <text x="360" y="425" class="small-text">• UpdaterAdded(address updater)</text>
  <text x="360" y="440" class="small-text">• UpdaterRemoved(address updater)</text>
  
  <!-- 部署脚本 -->
  <rect x="50" y="500" width="200" height="80" class="library-box"/>
  <text x="150" y="525" text-anchor="middle" class="contract-title white-text">DeployTWAP.s.sol</text>
  <text x="150" y="545" text-anchor="middle" class="text white-text">部署脚本</text>
  <text x="60" y="565" class="small-text white-text">• 合约部署逻辑</text>
  <text x="60" y="575" class="small-text white-text">• 初始化参数设置</text>
  
  <!-- 测试合约 -->
  <rect x="350" y="500" width="300" height="80" class="library-box"/>
  <text x="500" y="525" text-anchor="middle" class="contract-title white-text">MemeTWAP.t.sol</text>
  <text x="500" y="545" text-anchor="middle" class="text white-text">测试合约</text>
  <text x="360" y="565" class="small-text white-text">• 11个测试用例覆盖所有功能</text>
  <text x="360" y="575" class="small-text white-text">• 模糊测试和边界条件测试</text>
  
  <!-- 配置文件 -->
  <rect x="750" y="500" width="200" height="80" class="contract-box"/>
  <text x="850" y="525" text-anchor="middle" class="contract-title">配置文件</text>
  <text x="760" y="545" class="small-text">• foundry.toml</text>
  <text x="760" y="560" class="small-text">• .env 环境变量</text>
  <text x="760" y="575" class="small-text">• 部署配置</text>
  
  <!-- 连接线 -->
  <!-- 继承关系 -->
  <line x1="250" y1="140" x2="350" y2="140" class="inherit-arrow"/>
  <text x="300" y="135" text-anchor="middle" class="small-text">继承</text>
  
  <!-- 数据访问 -->
  <line x1="650" y1="160" x2="750" y2="160" class="arrow"/>
  <line x1="650" y1="200" x2="750" y2="300" class="arrow"/>
  <text x="700" y="155" text-anchor="middle" class="small-text">读写</text>
  
  <!-- 外部调用 -->
  <line x1="250" y1="300" x2="350" y2="250" class="interact-arrow"/>
  <text x="280" y="270" text-anchor="middle" class="small-text">调用</text>
  
  <!-- 事件发出 -->
  <line x1="500" y1="300" x2="500" y2="350" class="arrow"/>
  <text x="520" y="325" text-anchor="middle" class="small-text">发出事件</text>
  
  <!-- 部署关系 -->
  <line x1="150" y1="500" x2="400" y2="300" class="use-arrow"/>
  <text x="250" y="400" text-anchor="middle" class="small-text">部署</text>
  
  <!-- 测试关系 -->
  <line x1="500" y1="500" x2="500" y2="450" class="use-arrow"/>
  <text x="520" y="475" text-anchor="middle" class="small-text">测试</text>
  
  <!-- 图例 -->
  <rect x="50" y="650" width="900" height="120" fill="#f8f9fa" stroke="#dee2e6" stroke-width="1" rx="5"/>
  <text x="500" y="670" text-anchor="middle" class="contract-title">架构说明</text>
  
  <rect x="70" y="680" width="15" height="15" class="main-contract"/>
  <text x="95" y="692" class="small-text">主合约 - 核心业务逻辑</text>
  
  <rect x="250" y="680" width="15" height="15" class="interface-box"/>
  <text x="275" y="692" class="small-text">接口/基类 - 继承关系</text>
  
  <rect x="430" y="680" width="15" height="15" class="storage-box"/>
  <text x="455" y="692" class="small-text">数据存储 - 状态变量</text>
  
  <rect x="600" y="680" width="15" height="15" class="external-box"/>
  <text x="625" y="692" class="small-text">外部系统 - 调用方</text>
  
  <rect x="750" y="680" width="15" height="15" class="library-box"/>
  <text x="775" y="692" class="small-text">工具合约 - 部署/测试</text>
  
  <line x1="70" y1="710" x2="120" y2="710" class="inherit-arrow"/>
  <text x="130" y="715" class="small-text">继承关系</text>
  
  <line x1="250" y1="710" x2="300" y2="710" class="arrow"/>
  <text x="310" y="715" class="small-text">数据流</text>
  
  <line x1="430" y1="710" x2="480" y2="710" class="use-arrow"/>
  <text x="490" y="715" class="small-text">使用关系</text>
  
  <line x1="600" y1="710" x2="650" y2="710" class="interact-arrow"/>
  <text x="660" y="715" class="small-text">交互调用</text>
  
  <text x="70" y="735" class="small-text">• MemeTWAP 合约继承 OpenZeppelin 的 Ownable，提供访问控制功能</text>
  <text x="70" y="750" class="small-text">• 外部系统通过标准接口调用合约函数，合约将数据存储在区块链上</text>
  <text x="70" y="765" class="small-text">• 部署脚本负责合约部署，测试合约确保功能正确性</text>
</svg>